<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3 r1808647">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="THREADS" elementType="Argument">
            <stringProp name="Argument.name">THREADS</stringProp>
            <stringProp name="Argument.value">${__P(THREADS, 10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMPUP" elementType="Argument">
            <stringProp name="Argument.name">RAMPUP</stringProp>
            <stringProp name="Argument.value">${__P(RAMP_UP, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LOOPS" elementType="Argument">
            <stringProp name="Argument.name">LOOPS</stringProp>
            <stringProp name="Argument.value">${__P(LOOPS, 1)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DURATION" elementType="Argument">
            <stringProp name="Argument.name">DURATION</stringProp>
            <stringProp name="Argument.value">${__P(DURATION, 10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH" elementType="Argument">
            <stringProp name="Argument.name">PATH</stringProp>
            <stringProp name="Argument.value">${__P(PATH, ${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)})}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PATH_LIBS" elementType="Argument">
            <stringProp name="Argument.name">PATH_LIBS</stringProp>
            <stringProp name="Argument.value">${__P(PATH_LIBS, ${__BeanShell(import org.apache.jmeter.services.FileServer; FileServer.getFileServer().getBaseDir();)}/../../../tools/custom_libs)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="TEST_PROFILE" elementType="Argument">
            <stringProp name="Argument.name">TEST_PROFILE</stringProp>
            <stringProp name="Argument.value">${__P(TEST_PROFILE, NormalTraffic)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SITE_HOST_NAME" elementType="Argument">
            <stringProp name="Argument.name">SITE_HOST_NAME</stringProp>
            <stringProp name="Argument.value">${__P(SITE_HOST_NAME, www.jmetervn.com)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SITE_PORT_HTTP" elementType="Argument">
            <stringProp name="Argument.name">SITE_PORT_HTTP</stringProp>
            <stringProp name="Argument.value">${__P(SITE_PORT_HTTP, 80)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="SITE_PORT_HTTPS" elementType="Argument">
            <stringProp name="Argument.name">SITE_PORT_HTTPS</stringProp>
            <stringProp name="Argument.value">${__P(SITE_PORT_HTTPS, 443)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CONTACT_PHONE_VALUE_MIN" elementType="Argument">
            <stringProp name="Argument.name">CONTACT_PHONE_VALUE_MIN</stringProp>
            <stringProp name="Argument.value">${__P(CONTACT_PHONE_VALUE_MIN, 0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CONTACT_PHONE_VALUE_MAX" elementType="Argument">
            <stringProp name="Argument.name">CONTACT_PHONE_VALUE_MAX</stringProp>
            <stringProp name="Argument.value">${__P(CONTACT_PHONE_VALUE_MAX, 3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EMAIL_VALUE_MIN" elementType="Argument">
            <stringProp name="Argument.name">EMAIL_VALUE_MIN</stringProp>
            <stringProp name="Argument.value">${__P(EMAIL_VALUE_MIN, 0)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="EMAIL_VALUE_MAX" elementType="Argument">
            <stringProp name="Argument.name">EMAIL_VALUE_MAX</stringProp>
            <stringProp name="Argument.value">${__P(EMAIL_VALUE_MAX, 3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain">${SITE_HOST_NAME}</stringProp>
        <stringProp name="HTTPSampler.port">${SITE_PORT_HTTP}</stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1507440617000</longProp>
        <longProp name="ThreadGroup.end_time">1507440617000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </SetupThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="OSCM - EXC - 0010 - setUp OS Command" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">951eb421-a0d8-4c84-aeec-e103090051bd</stringProp>
            <stringProp name="script">def path = vars.get(&quot;PATH&quot;)

def os_name = System.getProperty(&quot;os.name&quot;)

if (os_name.toLowerCase().contains(&quot;mac&quot;)) {
	log.info &quot;test&quot;
	(1..5).each { it -&gt;
		def command = &quot;touch &quot; + path + &quot;/data/temp/&quot; + &quot;temp&quot; + it + &quot;.txt&quot;
		command.execute()	
	}
} else if (os_name.toLowerCase().contains(&quot;windows&quot;)) {
	(1..5).each { it -&gt;
		def command = &quot;echo test &gt; &quot; + path + &quot;/data/temp/&quot; + &quot;temp&quot; + it + &quot;.txt&quot;
		command.execute()	
	}
}

</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">${LOOPS}</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${THREADS}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${RAMPUP}</stringProp>
        <longProp name="ThreadGroup.start_time">1505573702000</longProp>
        <longProp name="ThreadGroup.end_time">1505573702000</longProp>
        <boolProp name="ThreadGroup.scheduler">true</boolProp>
        <stringProp name="ThreadGroup.duration">${DURATION}</stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Profile" enabled="true"/>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
          <hashTree>
            <SwitchController guiclass="SwitchControllerGui" testclass="SwitchController" testname="Switch Controller" enabled="true">
              <stringProp name="SwitchController.value">PROF - 0010 - EXC - ${TEST_PROFILE}</stringProp>
            </SwitchController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PROF - 0010 - EXC - Default" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">1ba7b1e0-f17e-4609-858e-0dc17a7e3cac</stringProp>
                <stringProp name="script">def randomTable = [
    [&quot;Anonymous Users&quot;,   	100],
    [&quot;Authenticated Users&quot;,   0],
    [&quot;Search&quot;,   			0],
    [&quot;Cart&quot;,   			0],
];
vars.putObject(&quot;MAIN_ACTION_RANDOM_TABLE&quot;, randomTable);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PROF - 0010 - EXC - NormalTraffic" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">d8d0ac50-91c7-4068-84ed-67f214c27f50</stringProp>
                <stringProp name="script">def randomTable = [
    [&quot;Anonymous Users&quot;,   	40],
    [&quot;Authenticated Users&quot;,   30],
    [&quot;Search&quot;,   			20],
    [&quot;Cart&quot;,   			10],
];
vars.putObject(&quot;MAIN_ACTION_RANDOM_TABLE&quot;, randomTable);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PROF - 0010 - EXC - BigDeal" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">6f31bc59-6112-42b1-a654-505a957d5e30</stringProp>
                <stringProp name="script">def randomTable = [
    [&quot;Anonymous Users&quot;,   	 5],
    [&quot;Authenticated Users&quot;,   10],
    [&quot;Search&quot;,   			15],
    [&quot;Cart&quot;,   			70],
];
vars.putObject(&quot;MAIN_ACTION_RANDOM_TABLE&quot;, randomTable);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PROF - 0010 - EXC - Campaign" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">70c44b4f-38fb-4f5e-afea-43eab4ccfad2</stringProp>
                <stringProp name="script">def randomTable = [
    [&quot;Anonymous Users&quot;,   	20],
    [&quot;Authenticated Users&quot;,   15],
    [&quot;Search&quot;,   			35],
    [&quot;Cart&quot;,   			30],
];
vars.putObject(&quot;MAIN_ACTION_RANDOM_TABLE&quot;, randomTable);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PROF - 0010 - EXC - ReadingCSV" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">1e3892c7-ac5d-4082-8f21-1a2e290ffe92</stringProp>
                <stringProp name="script">def randomTable = [
    [&quot;Reading CSV&quot;, 100],
];
vars.putObject(&quot;MAIN_ACTION_RANDOM_TABLE&quot;, randomTable);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PROF - 0010 - EXC - Assertions" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">f30bb1c3-b594-4df6-bd71-250adfe732b2</stringProp>
                <stringProp name="script">def randomTable = [
    [&quot;Assertions&quot;, 100],
];
vars.putObject(&quot;MAIN_ACTION_RANDOM_TABLE&quot;, randomTable);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PROF - 0010 - EXC - Timer" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">fe05c1fe-73a0-424e-ba3e-fdc31768cc91</stringProp>
                <stringProp name="script">def randomTable = [
    [&quot;Timer&quot;, 100],
];
vars.putObject(&quot;MAIN_ACTION_RANDOM_TABLE&quot;, randomTable);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PROF - 0010 - EXC - Listeners" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">cc1f3b8e-b961-4c92-8a58-3e6f5181cfda</stringProp>
                <stringProp name="script">def randomTable = [
    [&quot;Listeners&quot;, 100],
];
vars.putObject(&quot;MAIN_ACTION_RANDOM_TABLE&quot;, randomTable);</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PROF - 0010 - EXC - OSCommand" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">8b081c4d-1a2a-4641-a9e8-ddf28c48af5f</stringProp>
                <stringProp name="script">def randomTable = [
    [&quot;OS Command&quot;, 100],
];
vars.putObject(&quot;MAIN_ACTION_RANDOM_TABLE&quot;, randomTable);</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="PROF - 0020 - EXC - Random main action" enabled="true">
              <stringProp name="cacheKey">4fa6d98f-5933-4f27-978a-eb8c11a278cf</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">def profileSource = vars.getObject(&quot;MAIN_ACTION_RANDOM_TABLE&quot;)

for (method in profileSource) {
    log.info(&quot;Model: &quot; + method[0].toString() + &quot; &quot; + method[1].toString());
    props.put(method[0].toString(), method[1].toString());
}</stringProp>
              <stringProp name="scriptLanguage">groovy</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Main Actions Before" enabled="true"/>
        <hashTree>
          <OnceOnlyController guiclass="OnceOnlyControllerGui" testclass="OnceOnlyController" testname="Once Only Controller" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="FTUT - 0010 - EXC - JSR223 Sampler - FunctionUtils" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">d3e46b0f-3eed-41de-861f-7f0027004cca</stringProp>
              <stringProp name="script">class FunctionUtils {
    def generator(String alphabet, int length) {
        new Random().with { (1..length).collect { alphabet[nextInt(alphabet.length())] }.join() }
    }

    def randomNumber(int length, String format = &quot;%s&quot;) {
        sprintf(format, this.generator((&apos;0&apos;..&apos;9&apos;).join(), length))
    }

    def randomString(int length, String format = &quot;%s&quot;) {
        sprintf(format, this.generator(((&apos;A&apos;..&apos;Z&apos;)+(&apos;a&apos;..&apos;z&apos;)+(&apos;0&apos;..&apos;9&apos;)).join(), length))
    }

    def randomWord(int length, String format = &quot;%s&quot;) {
        sprintf(format, this.randomString(new Random().nextInt(length)))
    }

    def randomSentence(int length, String format = &quot;%s&quot;) {
        sprintf(format, new Random().with { (1..nextInt(length)).collect { this.randomWord(15) }.join(&quot; &quot;) })
    }

    def randomParagraph(int length, String format = &quot;%s&quot;) {
        sprintf(format, new Random().with { (1..nextInt(length)).collect { this.randomSentence(15) + &quot;.&quot; }.join(&quot; &quot;) })
    }

    def rangeNumber(int min, int max) {
        new Random().nextInt(max - min + 1) + min
    }

    def randomItem(List list) {
        list[new Random().nextInt(list.size())]
    }
}

vars.putObject(&quot;FUNCTION_UTILS&quot;, new FunctionUtils());
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="LPDT - 0010 - EXC - JSR223 Sampler - Load PRODUCTS_DATA" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters">PRODUCTS_DATA ${PATH}/data/products1.csv returnFormat=map</stringProp>
              <stringProp name="filename">${PATH_LIBS}/csv_load_file.groovy</stringProp>
              <stringProp name="cacheKey">c2aa3924-b9d7-4647-8090-51d5ce57d4f1</stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Main Actions" enabled="true"/>
        <hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Anonymous Users" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${__P(Anonymous Users,0)}</stringProp>
          </ThroughputController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="ANON - 0010 - Anonymous users browsing website" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
                <stringProp name="cacheKey">b2a57c05-31a7-4821-aae0-7f6fbd9fa635</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def FuntionUtils = vars.getObject(&quot;FUNCTION_UTILS&quot;)

bList = [true, false]

def json_data = [
	name 		: FuntionUtils.randomWord(10),
	age			: FuntionUtils.rangeNumber(20,50),
	isMarriage	: FuntionUtils.randomItem(bList),
	hasChild		: FuntionUtils.randomItem(bList),
	hobbies		: [
		&quot;music&quot;,
		&quot;football&quot;,
		&quot;movies&quot;
	],
	information	: [
		hasOwnHouse	: FuntionUtils.randomItem(bList),
		locations		: [
			[
				type		: &quot;Company&quot;,
				address	: FuntionUtils.randomSentence(10)
			],
			[
				type		: &quot;Home&quot;,
				address	: FuntionUtils.randomSentence(10)
			]
		],
		contact		: [
			phone : [
				[
					type: &quot;Home&quot;,
					number: FuntionUtils.randomNumber(10).toLong()
				],
				[
					type: &quot;Mobile&quot;,
					number: FuntionUtils.randomNumber(10).toLong()
				]
			]
		],
		emails: [
			FuntionUtils.randomWord(10) + &quot;@gmail.com&quot;,
			FuntionUtils.randomWord(10) + &quot;@gmail.com&quot;
		]
	]
]

def json = new groovy.json.JsonBuilder(json_data);
log.info groovy.json.JsonOutput.prettyPrint(json.toString())</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor: Build JSon with condition" enabled="true">
                <stringProp name="cacheKey">b2a57c05-31a7-4821-aae0-7f6fbd9fa635</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def FuntionUtils = vars.getObject(&quot;FUNCTION_UTILS&quot;)

def bList = [true, false]

def name_value = FuntionUtils.randomWord(30)

//handle hobbies_list
def hobbies_list 		= [&quot;music&quot;, &quot;football&quot;, &quot;movies&quot;, &quot;dancing&quot;, &quot;sport&quot;, &quot;cooking&quot;, &quot;fishing&quot;, &quot;writing&quot;, &quot;learning&quot;, &quot;shopping&quot;]
Collections.shuffle(hobbies_list)
def hobbies_value 		= []
def random_hobbies_items = FuntionUtils.rangeNumber(0,hobbies_list.size())

if (random_hobbies_items &gt; 0) {
	(1..random_hobbies_items).each {
		hobbies_value &lt;&lt; hobbies_list[it-1]
	}
}

log.info hobbies_value.toString()

//handle locations base on hasOwnHouse value
def hasOwnHouse_value = FuntionUtils.randomItem(bList)
def locations_value = []
locations_value &lt;&lt; [type: &quot;Company&quot;, address: FuntionUtils.randomSentence(10)]
if (hasOwnHouse_value) {
	locations_value &lt;&lt; [type: &quot;Home&quot;, address: FuntionUtils.randomSentence(10)]
}

log.info hasOwnHouse_value.toString()
log.info locations_value.toString()

//handle contact phone with min, max value
def contact_phone_value_min = vars.get(&quot;CONTACT_PHONE_VALUE_MIN&quot;).toInteger()
def contact_phone_value_max = vars.get(&quot;CONTACT_PHONE_VALUE_MAX&quot;).toInteger()
def random_no_of_contact_phone = FuntionUtils.rangeNumber(contact_phone_value_min,contact_phone_value_max)

def phones_value = []
def phone_type = [&quot;Home&quot;, &quot;Work&quot;, &quot;Mobile&quot;]

if (random_no_of_contact_phone &gt; 0) {
	(1..random_no_of_contact_phone).each {
		phones_value &lt;&lt; [type: FuntionUtils.randomItem(phone_type), number: FuntionUtils.randomNumber(10).toLong()]
	}
}

log.info phones_value.toString()

//handle email with min, max value
def email_value_min = vars.get(&quot;EMAIL_VALUE_MIN&quot;).toInteger()
def email_value_max = vars.get(&quot;EMAIL_VALUE_MAX&quot;).toInteger()
def random_no_of_email = FuntionUtils.rangeNumber(email_value_min,email_value_max)

def emails_value = []

if (random_no_of_email &gt; 0) {
	(1..random_no_of_contact_phone).each {
		emails_value &lt;&lt; FuntionUtils.randomWord(15) + &quot;@gmail.com&quot;
	}
}

log.info emails_value.toString()

def json_data = [
	name 		: name_value,
	age			: FuntionUtils.rangeNumber(20,50),
	isMarriage	: FuntionUtils.randomItem(bList),
	hasChild		: FuntionUtils.randomItem(bList),
	hobbies		: hobbies_value,
	information	: [
		hasOwnHouse	: hasOwnHouse_value,
		locations		: locations_value,
		contact		: [
			phone : phones_value
		],
		emails: emails_value
	]
]

def json = new groovy.json.JsonBuilder(json_data);
log.info groovy.json.JsonOutput.prettyPrint(json.toString())</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor: Build JSon with condition" enabled="false">
                <stringProp name="cacheKey">b2a57c05-31a7-4821-aae0-7f6fbd9fa635</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def FuntionUtils = vars.getObject(&quot;FUNCTION_UTILS&quot;)

def bList = [true, false]

def name_value = FuntionUtils.randomWord(30)

//handle hobbies_list
def hobbies_list 		= [&quot;music&quot;, &quot;football&quot;, &quot;movies&quot;, &quot;dancing&quot;, &quot;sport&quot;, &quot;cooking&quot;, &quot;fishing&quot;, &quot;writing&quot;, &quot;learning&quot;, &quot;shopping&quot;]
Collections.shuffle(hobbies_list)
def hobbies_value 		= []
def random_hobbies_items = FuntionUtils.rangeNumber(0,hobbies_list.size())

if (random_hobbies_items &gt; 0) {
	(1..random_hobbies_items).each {
		hobbies_value &lt;&lt; hobbies_list[it-1]
	}
}

log.info hobbies_value.toString()

//handle locations base on hasOwnHouse value
def hasOwnHouse_value = FuntionUtils.randomItem(bList)
def locations_value = []
locations_value &lt;&lt; [type: &quot;Company&quot;, address: FuntionUtils.randomSentence(10)]
if (hasOwnHouse_value) {
	locations_value &lt;&lt; [type: &quot;Home&quot;, address: FuntionUtils.randomSentence(10)]
}

log.info hasOwnHouse_value.toString()
log.info locations_value.toString()

//handle contact phone with min, max value
def contact_phone_value_min = vars.get(&quot;CONTACT_PHONE_VALUE_MIN&quot;).toInteger()
def contact_phone_value_max = vars.get(&quot;CONTACT_PHONE_VALUE_MAX&quot;).toInteger()
def random_no_of_contact_phone = FuntionUtils.rangeNumber(contact_phone_value_min,contact_phone_value_max)

def phones_value = []
def phone_type = [&quot;Home&quot;, &quot;Work&quot;, &quot;Mobile&quot;]

if (random_no_of_contact_phone &gt; 0) {
	(1..random_no_of_contact_phone).each {
		phones_value &lt;&lt; [type: FuntionUtils.randomItem(phone_type), number: FuntionUtils.randomNumber(10).toLong()]
	}
}

log.info phones_value.toString()

//handle email with min, max value
def email_value_min = vars.get(&quot;EMAIL_VALUE_MIN&quot;).toInteger()
def email_value_max = vars.get(&quot;EMAIL_VALUE_MAX&quot;).toInteger()
def random_no_of_email = FuntionUtils.rangeNumber(email_value_min,email_value_max)

def emails_value = []

if (random_no_of_email &gt; 0) {
	(1..random_no_of_contact_phone).each {
		emails_value &lt;&lt; FuntionUtils.randomWord(15) + &quot;@gmail.com&quot;
	}
}

log.info emails_value.toString()

def json_data = [
	name 		: name_value,
	age			: FuntionUtils.rangeNumber(20,50),
	isMarriage	: FuntionUtils.randomItem(bList),
	hasChild		: FuntionUtils.randomItem(bList),
	hobbies		: hobbies_value,
	information	: [
		hasOwnHouse	: hasOwnHouse_value,
		locations		: locations_value,
		contact		: [
			phone : phones_value
		],
		emails: emails_value
	]
]

def json = new groovy.json.JsonBuilder(json_data);
log.info groovy.json.JsonOutput.prettyPrint(json.toString())</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Authenticated Users" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${__P(Authenticated Users,0)}</stringProp>
          </ThroughputController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="AUTH - 0010 - Authenticated users browsing website" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Search" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${__P(Search,0)}</stringProp>
          </ThroughputController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="SEAR - 0010 Search Items" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Cart" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${__P(Cart,0)}</stringProp>
          </ThroughputController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="CART - 0010 - Add to Cart" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="CART - 0020 - Change Quatity" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="CART - 0030 - Place Order" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Reading CSV" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${__P(Reading CSV,0)}</stringProp>
          </ThroughputController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="RCSV - 0010 - Reading CSV" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor - List" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">36e53142-5714-4e2a-8c19-d6f6472236b7</stringProp>
                <stringProp name="script">def products_data = vars.getObject(&quot;PRODUCTS_DATA&quot;)

products_data.each { data -&gt;
	data.each { it -&gt;
		log.info it
	}
	log.info &quot;-------&quot;
}</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor - Apply List" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">36e53142-5714-4e2a-8c19-d6f6472236b7</stringProp>
                <stringProp name="script">def products_data = vars.getObject(&quot;PRODUCTS_DATA&quot;)
Collections.shuffle(products_data)

log.info products_data.get(0).get(0).toString() 	//return data of row1 column1
log.info products_data.get(0).get(1)			//return data of row1 column2
log.info products_data.get(0).get(2)		 	//return data of row1 column3
log.info products_data.get(0).get(3)		 	//return data of row1 column4</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor - Map" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">36e53142-5714-4e2a-8c19-d6f6472236b7</stringProp>
                <stringProp name="script">def products_data = vars.getObject(&quot;PRODUCTS_DATA&quot;)

products_data.each { data -&gt;
	data.each { key, it -&gt;
		log.info key + &quot; : &quot; + it
	}
	log.info &quot;-------&quot;
}</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor - Apply Map" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">36e53142-5714-4e2a-8c19-d6f6472236b7</stringProp>
                <stringProp name="script">def products_data = vars.getObject(&quot;PRODUCTS_DATA&quot;)
Collections.shuffle(products_data)

log.info products_data.get(0).product_id.toString() 	//return product_id of row1
log.info products_data.get(0).sku					//return sku of row1
log.info products_data.get(0).seller_id		 		//return seller_id of row1
log.info products_data.get(0).seller_name		 	//return seller_name of row1</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Timer" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${__P(Timer,0)}</stringProp>
          </ThroughputController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="TIME - 0010 - Timer 1" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree/>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="TIME - 0020 - Timer 2" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <JSR223Timer guiclass="TestBeanGUI" testclass="JSR223Timer" testname="JSR223 Timer" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">b26e1233-b5ca-4d1b-b2c5-893c3da273b2</stringProp>
                <stringProp name="script">def min = 1000
def max = 5000
def timer = new Random().nextInt(max - min + 1) + min

return timer</stringProp>
              </JSR223Timer>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Assertions" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${__P(Assertions,0)}</stringProp>
          </ThroughputController>
          <hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="ASSE - 0010 - Assertions Response Code" enabled="false">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">${__Random(200,202,)}</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">c3f05d28-908f-4e64-8503-976aff942bf6</stringProp>
                <stringProp name="script">def response_code = prev.getResponseCode()

if (!&quot;200&quot;.equals(response_code)) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Expected &lt;response code&gt; [200] but we got instead [&quot; + response_code + &quot;]&quot;)
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="ASSE - 0020 - Assertions Response Data" enabled="false">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">200</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA">{&quot;status&quot;: &quot;ERROR&quot;,&quot;ErrorMessage&quot;: &quot;error message here&quot;}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">c3f05d28-908f-4e64-8503-976aff942bf6</stringProp>
                <stringProp name="script">def response = SampleResult.getResponseDataAsString()

def expected_data = &apos;&quot;token&quot;&apos;

if (!response.contains(expected_data)) {
	AssertionResult.setFailure(true)
	AssertionResult.setFailureMessage(&quot;Response data does not contain text: &quot; + expected_data)
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
            <kg.apc.jmeter.samplers.DummySampler guiclass="kg.apc.jmeter.samplers.DummySamplerGui" testclass="kg.apc.jmeter.samplers.DummySampler" testname="ASSE - 0030 - Assertions JSON Advanced" enabled="true">
              <boolProp name="WAITING">true</boolProp>
              <boolProp name="SUCCESFULL">true</boolProp>
              <stringProp name="RESPONSE_CODE">${__Random(200,201,)}</stringProp>
              <stringProp name="RESPONSE_MESSAGE">OK</stringProp>
              <stringProp name="REQUEST_DATA">Dummy Sampler used to simulate requests and responses
without actual network activity. This helps debugging tests.</stringProp>
              <stringProp name="RESPONSE_DATA">[{&quot;status&quot;: &quot;OK&quot;,&quot;token&quot;:&quot;${__RandomString(${__Random(31,32,)},1234567890qwertyuiopasdfghjklzxcvbnm,)}&quot;}</stringProp>
              <stringProp name="RESPONSE_TIME">${__Random(50,500)}</stringProp>
              <stringProp name="LATENCY">${__Random(1,50)}</stringProp>
              <stringProp name="CONNECT">${__Random(1,5)}</stringProp>
            </kg.apc.jmeter.samplers.DummySampler>
            <hashTree>
              <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">c3f05d28-908f-4e64-8503-976aff942bf6</stringProp>
                <stringProp name="script">def slurper = new groovy.json.JsonSlurper()
def failureMessage = &quot;&quot;
def response = null

try {
    response = slurper.parseText(prev.getResponseDataAsString())

    if(!&quot;200&quot;.equals(prev.getResponseCode())){
		failureMessage += &quot;Expected &lt;response code&gt; [200] but we got instead [&quot; + prev.getResponseCode() + &quot;]\n\n&quot; ;
	}

	if (!response.keySet().containsAll([&quot;status&quot;,&quot;token&quot;])) {
		failureMessage += &quot;The json config element has wrong structure.\n\n&quot;;
	}

	if (response.token.size() != 32) {
		failureMessage += &quot;The token has wrong format. Expectes str [32] chars but found [&quot; + response.token.size() + &quot;] chars\n\n&quot;;
	} 
} catch (Exception e) {
    failureMessage += &quot;Invalid JSON.\n&quot;
}



// Print error messages if any
if (failureMessage?.trim()) {
	failureMessage += &quot;JSON RESPONSE: &quot; + response + &quot;\n\n&quot;;

	AssertionResult.setFailureMessage(failureMessage);
	AssertionResult.setFailure(true);    
}</stringProp>
              </JSR223Assertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="Listeners" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${__P(Listeners,0)}</stringProp>
          </ThroughputController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LIST - 0010 - Home Page" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">jmeter.apache.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path"></stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LIST - 0020 - Listener Page" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">jmeter.apache.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/usermanual/listeners.html</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="LIST - 0030 - Download Page" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">jmeter.apache.org</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol"></stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/download_jmeter.cgi</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <ThroughputController guiclass="ThroughputControllerGui" testclass="ThroughputController" testname="OS Command" enabled="true">
            <intProp name="ThroughputController.style">1</intProp>
            <boolProp name="ThroughputController.perThread">false</boolProp>
            <intProp name="ThroughputController.maxThroughput">1</intProp>
            <stringProp name="ThroughputController.percentThroughput">${__P(OS Command,0)}</stringProp>
          </ThroughputController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">d5264ff1-92a6-42a4-9a15-69c1ff79b5bd</stringProp>
              <stringProp name="script">log.info &quot;ifconfig&quot;.execute().text</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <SystemSampler guiclass="SystemSamplerGui" testclass="SystemSampler" testname="OS Process Sampler" enabled="true">
              <boolProp name="SystemSampler.checkReturnCode">false</boolProp>
              <stringProp name="SystemSampler.expectedReturnCode">0</stringProp>
              <stringProp name="SystemSampler.command"></stringProp>
              <elementProp name="SystemSampler.arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <elementProp name="SystemSampler.environment" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="SystemSampler.directory"></stringProp>
            </SystemSampler>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
      <JSR223Listener guiclass="TestBeanGUI" testclass="JSR223Listener" testname="JSR223 Listener" enabled="false">
        <stringProp name="cacheKey">bc20c726-8882-46b6-aa35-34a19c12f96a</stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="script">def header = prev.getResponseHeaders().replaceAll(&apos;\n&apos;, &apos;&lt;rtrn&gt;&apos;);
vars.put(&apos;SAMPLE_VAR_HEADER&apos;,   header);
vars.put(&quot;SAMPLE_VAR_IP&quot;, 	  org.apache.jmeter.util.JMeterUtils.getLocalHostIP());</stringProp>
        <stringProp name="scriptLanguage">groovy</stringProp>
      </JSR223Listener>
      <hashTree/>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="(Debug only) Debug Sampler" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="TestPlan.comments">Ensure to disable this step before save and run</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="(Debug only) View Results Tree" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="TestPlan.comments">Ensure to disable this step before save and run</stringProp>
      </ResultCollector>
      <hashTree/>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1507440491000</longProp>
        <longProp name="ThreadGroup.end_time">1507440491000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </PostThreadGroup>
      <hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Simple Controller" enabled="true"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="OSCM - EXC - 0010 - tearDown OS Command" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">951eb421-a0d8-4c84-aeec-e103090051bd</stringProp>
            <stringProp name="script">def path = vars.get(&quot;PATH&quot;)

def os_name = System.getProperty(&quot;os.name&quot;)

if (os_name.toLowerCase().contains(&quot;mac&quot;)) {
	log.info(&quot;test from tearDown&quot;)
	def command = &quot;sh -c &apos;rm &quot; + path + &quot;/data/temp/temp*.txt&apos;&quot;
	log.info command
	command.execute()	
} else if (os_name.toLowerCase().contains(&quot;windows&quot;)) {
	//command to delete all files on windows
}

</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree>
      <ConfigTestElement guiclass="PropertyControlGui" testclass="ConfigTestElement" testname="Property Display" enabled="true"/>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
